package com.mikeporet.autoremind;import android.content.Context;import android.content.Intent;import android.content.res.Resources;import android.graphics.drawable.Drawable;import android.media.Image;import android.support.v7.widget.CardView;import android.support.v7.widget.RecyclerView;import android.util.Log;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.ImageView;import android.widget.TextView;import org.w3c.dom.Text;import java.util.ArrayList;import java.util.Collection;import java.util.Collections;import java.util.Date;import java.util.List;/** * Created by mikeporet on 10/11/17. */public class CarTasksRecyclerAdapter extends RecyclerView.Adapter<CarTasksRecyclerAdapter.ViewHolder> {    public double mileage;    private List<Task> tasks;    private Car car;    public static class ViewHolder extends RecyclerView.ViewHolder implements View.OnClickListener{        public TextView taskTitle;        public TextView taskDueDate;        public ImageView taskImage;        public ImageView taskDifficulty;        private ImageView numPeople;        public TextView taskInstructions;        public TextView taskDone;        private CardView cardView;        public List<Task> tasks;        public double mileage;        public CarTasksRecyclerAdapter adapter;        public Car car;        public ViewHolder(final View itemView, double mileage, List<Task> tasks, CarTasksRecyclerAdapter adapter, Car car) {            super(itemView);            taskTitle = (TextView) itemView.findViewById(R.id.task_title);            taskDueDate = (TextView) itemView.findViewById(R.id.taskDueDate);            taskImage = (ImageView) itemView.findViewById(R.id.image_view);            cardView = (CardView) itemView.findViewById(R.id.carTaskCard);            cardView.setOnClickListener(this);            taskInstructions = (TextView) itemView.findViewById(R.id.task_instructions);            taskDone = (TextView) itemView.findViewById(R.id.task_done);            taskDone.setOnClickListener(this);            taskDifficulty = (ImageView) itemView.findViewById(R.id.difficultyMeter);            numPeople = (ImageView) itemView.findViewById(R.id.numPeopleMeter);            taskInstructions.setOnClickListener(this);            this.tasks = tasks;            this.mileage = mileage;            this.adapter = adapter;            this.car = car;          }        @Override        public void onClick(View v) {            Task task = tasks.get(this.getAdapterPosition());            if (v.getId() == R.id.task_done) {                task.recomputeDate(mileage);                Collections.sort(tasks);                adapter.notifyDataSetChanged();            } else {                String cTaskTitle = task.getTitle();                Intent intent = new Intent(v.getContext(), TaskInstructionsActivity.class);                intent.putExtra("Task", task);                intent.putExtra("Tasks", (ArrayList<Task>) tasks);                intent.putExtra("Mileage", mileage);                intent.putExtra("Car", car);                itemView.getContext().startActivity(intent);            }        }    }    public CarTasksRecyclerAdapter(List<Task> tasks, double mileage, Car car)    {        this.tasks = tasks;        this.mileage = mileage;        this.car = car;    }    public CarTasksRecyclerAdapter.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {        Context context = parent.getContext();        LayoutInflater inflater = LayoutInflater.from(context);        View contactView = inflater.inflate(R.layout.car_task_view, parent, false);        ViewHolder viewHolder = new ViewHolder(contactView, mileage, tasks, this, car);        return viewHolder;    }    public void reset_content()    {        notifyDataSetChanged();    }    @Override    public void onBindViewHolder(ViewHolder holder, int position) {        Task task = tasks.get(position);        TextView title = holder.taskTitle;        title.setText(task.getTitle());        TextView instructions = holder.taskInstructions;        instructions.setText("INSTRUCTIONS");        TextView done = holder.taskDone;        done.setText("DONE");        ImageView image = holder.taskImage;        image.setImageDrawable(image.getContext().getDrawable(task.getImage()));        Log.d("imageTest", task.getImage()+"");        //Log.d("imagedrawable", image.getDrawable().toString());//        image.setImageDrawable(image.getContext().getDrawable(task.getImage()));        //image.setBackgroundResource(task.getImage());        ImageView difficultyMeter = holder.taskDifficulty;        Log.d("difficultyMeter", new Integer(task.getDifficulty()).toString());        Log.d("numPeople", new Integer(task.getNum_people()).toString());        Log.d("difficultyTitle", task.getTitle());        switch (task.getDifficulty()) {            case 1:                difficultyMeter.setImageDrawable(image.getContext().getDrawable(R.drawable.easy));                break;            case 2:                difficultyMeter.setImageDrawable(image.getContext().getDrawable(R.drawable.meduim));                break;            case 3:                difficultyMeter.setImageDrawable(image.getContext().getDrawable(R.drawable.hard));                break;            default:                difficultyMeter.setImageDrawable(image.getContext().getDrawable(R.drawable.hard));                break;        }        TextView date = holder.taskDueDate;        date.setText(task.dueDateToString());        ImageView numPeople = holder.numPeople;        switch (task.getNum_people()) {            case 1:                numPeople.setImageDrawable(image.getContext().getDrawable(R.drawable.one_people));                break;            case 2:                numPeople.setImageDrawable(image.getContext().getDrawable(R.drawable.two_people));                break;            case 3:                numPeople.setImageDrawable(image.getContext().getDrawable(R.drawable.three_people));                break;            default:                numPeople.setImageDrawable(image.getContext().getDrawable(R.drawable.one_people));                break;        }    }    @Override    public int getItemCount() {        return tasks.size();    }}